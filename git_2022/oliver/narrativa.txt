----------------------------------------
NARRATIVA

CURSO DE GIT E GITHUB

O QUE É GIT?
	GIT É UM SISTEMA OPEN SOURCE DE CONTROLE DE VERSÃO. CRIADO POR LINUS TORVALDS.
O QUE ELE FAZ?
	ARMAZENA UM HISTÓRICO DE ALTERAÇÕES NOS CÓDIGOS. PERMITINDO ASSIM A GENTE ACESSAR TODAS AS MODIFICAÇÕES FEITAS.

O QUE É GITHUB?
	GITHUB É UM SERVIÇO DE HOSPEDAGEM DE GIT. O GITHUB ARMAZENA O PROJETO (REPOSITÓRIO) E PERMITE A SINCRONIZAÇÃO COM TODOS OS MEMBROS DA EQUIPE. FACILITANDO ASSIM O COMPARTILHAMENTO DE VERSÕES.
	ALGUNS EXEMPLOS DE HUBS QUE SUPORTAM O GIT PARA ENVIO/RECEBIMENTO DE ARQUIVOS:
	-> GITHUB
	-> GITLAB
	-> BITBUCKET
	-> SOURCEFORGE


-- DEPOIS DE TER O GIT INSTALADO E A CONTA NO GITHUB --
-- ALGUNS HUBS DE GIT PODEM PEDIR A ALTENTICAÇÃO VIA CHAVE SSH. DE FORMA SIMPLES, O OBJETIVO É VALIDAR O USUÁRIO DO GIT E O HUB ESCOLHIDO. A FORMA COMO FAZER ESSA CONFIGURAÇÃO IRÁ VARIAR SEMPRE DE HUB PARA HUB.
===========================================================================================
===========================================================================================
-- CONFIGURANDO O AMBIENTE

// PODEMOS CONFIRMAR QUE O GIT FOI INSTALADO NO SISTEMA OPERACIONAL USANDO O COMANDO:
		--> GIT --VERSION

// PARA CONFERIR ALGUNS COMANDOS DO GIT BASTA UTILIZAR:
		--> GIT

// O RETORNO SERÁ UMA SÉRIE DE COMANDOS E ALGUMAS EXPLICAÇÕES BÁSICAS SOBRE ELES

// LISTA DE CONFIGURAÇÕES
		--> GIT CONFIG --LIST

// ESSE COMANDO IRÁ NOS APRESENTAR AS CONFIGURAÇÕES BÁSICAS DO GIT. ALGUMAS DESSAS CONFIGURAÇÕES IREMOS NOS UTILIZAR.

// E PARA FAZER A IDENTIFICAÇÃO NO GIT VAMOS COMANDAR AS CONFIGURAÇÕES DE NOME E E-MAIL.
		--> GIT CONFIG --GLOBAL USER.NAME. 'nome'
		--> GIT CONFIG --GLOBAL USER.EMAIL 'seu_email@exemplo.com'

// PARA FAZER A CONFIRMAÇÃO DE QUE AS CONFIGURAÇÕES FORAM MODIFICADAS, PODEMOS COMANDAR:
		--> GIT CONFIG USER.NAME
===========================================================================================
===========================================================================================
--- GERÊNCIA DE CONFIGURAÇÃO DE SOFTWARE ---

	DURANTE O DESENVOLVIMENTO DO SOFTWARE, SEMPRE APARECERÁ ALGUMAS PERGUNTAS QUANDO AS MUDANÇAS FORAM FEITAS. OS SOFTWARES IRÃO SOFRER VÁRIAS ALTERAÇÕES E SABER O QUE FOI MUDANDO, QUANDO FOI MUDADO, PORQUE FOI MUDADO, QUEM FEZ A MUDANÇA E SE ESSA MUDANÇA PODE SER REPRODUZIDA SÃO DÚVIAS E/OU INFORMAÇÕES MUITAS VEZES NECESSÁRIAS PARA A CONTINUAÇÃO DO DESENVOLVIMENTO DO SOFTWARE.

	EXISTEM 4 IMPORTANTES TÓPICOS SOBRE A GERÊNCIA DE CONFIGURAÇÃO DE SOFTWARE QUE MERECEM UMA ATENÇÃO ESPECIAL, SÃO ELES:
	-> IDENTIFICAÇÃO
	-> DOCUMENTAÇÃO
	-> CONTROLE
	-> AUDITORIA

	DURANTE O DESENVOLVIMENTO DE SOFTWARE, O ARTEFATO É PRODUZIDO. E A GERÊNCIA DE CONFIGURAÇÃO DE SOFTWARE DEVE SER APLICADA SOBRE O ARTEFATO. O ARTEFATO É UMA COMPISIÇÃO DESTES TRÊS PRINCIPAIS ITENS:
	-> CÓDIGO FONTE
	-> DOCUMENTAÇÃO DO SOFTWARE
	-> MANUAL DO USUÁRIO

===========================================================================================
===========================================================================================

--- COMEÇANDO POR UM PROJETO EM ANDAMENTO

===========================================================================================
===========================================================================================

// MEU FOCO AQUI É ABORDAR UMA ROTINA EMPRESARIAL, POR ISSO EU IREI COMEÇAR ME BASEANDO EM UMA REALIDADE QUE EU TIVE. QUANDO VOCÊ ESTÁ ENTRANDO NA EMPRESA PELA PRIMEIRA VEZ E TOTALMENTE SEM EXPERIÊNCIA.

// ENTÃO AQUI, AO INVÉS DE NÓS COMEÇARMOS COM O GIT INIT E TODO AQUELE PASSO A PASSO "PRÉ-PUSH" (TODO O PROCESSO DE INIT, ADD, COMMIT.... ATÉ O PUSH) VOU COMEÇAR ME BASEANDO NO GITHUB (PORQUE EU CONSIDERO UM IMPORTANTE LOCAL ONDE NOVAS PESSOAS POSSAM MOSTRAR O SEU CONHECIMENTO PARA AS EMPRESAS E AS PESSOAS QUE OBSERVAM AS EVOLUÇÕES DE NOVAS PESSOAS). ENTÃO, MESMO QUE NÃO MUITO UTILIZADO (NA EXPERIÊNCIA QUE EU TENHO) VOU COMEÇAR COM O FORK, MAS IREI REFORÇAR QUE TALVEZ O ESTUDANTE IRÁ COMEÇAR PELO CLONE.

// VAMOS FAZER UM FORK DO PROJETO QUE EU ESTOU ME UTILIZANDO PARA BUSCAR CONHECIMENTO E INFORMAÇÕES PARA ESSE CURSO. O LINK É: https://github.com/Under0Cover/curso_git_oliver

// NESTE CASO, Under0Cover É O MEU USUÁRIO E curso_git_oliver É O NOME DO REPOSITÓRIO.

// APÓS A SOLICITAÇÃO DO FORK, O USUÁRIO SERÁ MODIFICADO PARA A PESSOA QUE ESTÁ FAZENDO O FORK (O SEU USUÁRIO) E AGORA ESTAMOS PRONTOS PARA FAZER O CLONE DO REPOSITÓRIO.

// NO TERMINAL DO GIT IREMOS DAR O SEGUINTE COMANDO:
		-->	GIT CLONE https://github.com/SEU_USUARIO/curso_git_oliver

// FEITO ISSO VOCÊ TERÁ UM CLONE DO REPOSITÓRIO GIT E PODERÁ FAZER AS SUAS MODIFICAÇÕES.

===========================================================================================
===========================================================================================

--- INICIANDO UM PROJETO DO ZERO

===========================================================================================
===========================================================================================

// AGORA, VOU MODIFICAR A SEQUÊNCIA DOS COMANDOS E VOLTAR AO INÍCIO PARA COMEÇAR COM O INIT. POIS A FORMA QUE OS PARTICIPANTES IRÃO MOSTRAR QUE CONSEGUIRAM RECEBER OS ENSINAMENTOS É TER A SUA PRÓPRIA BRANCH CRIADA NO GITHUB COM O PROJETO PROPOSTO DO CURSO FINALIZADO.

-- GIT INIT

// VAMOS INICIAR UM PROJETO NOVO NO GIT, NOS UTILIZANDO DO INIT. ESSE COMANDO IRÁ CRIAR UM REPOSITÓRIO NOVO NO GIT. 
		--> GIT INIT

// O RETORNO ESPERADO É A MENSAGEM DIZENDO QUE FOI INICIALIZADO UM PROJETO VAZIO NO GIT

// FEITO ISSO, NOS VAMOS ADICIONAR OS ARQUIVOS E PASTAS QUE IRÃO COMPOR O NOSSO PROJETO.

-- GIT STATUS

// DEPOIS DE ADICIONARMOS OS ARQUIVOS, VAMOS UTILIZAR O COMANDO STATUS. ESSE COMANDO NOS PERMITE SABER QUAL É O ATUAL STATUS DO NOSSO REPOSITÓRIO.
		--> GIT STATUS

// O RETORNO SERÁ DIFERENTE DE ACORDO COM O STATUS DO REPOSITÓRIO. NESTE MOMENTO, COMO ACABAMOS DE COMEÇAR OS ARQUIVOS, O STATUS SERÁ DE ARQUIVOS NÃO TRACKEADOS.

// OS STATUS DOS ARQUIVOS SÃO DEFINIDOS EM TRÊS:
		--> LOCAL/MODIFICADO: É TODO ARQUIVO QUE FOI ADICIONADO/REMOVIDO/ADICIONADO. PORÉM ESTES ARQUIVOS NÃO ESTÃO NO PRÓXIMO COMMIT. A VERSÃO LOCAL ESTÁ DIFERENTE DA VERSÃO DO GIT.
		--> STAGED: APÓS COMANDAR 'GIT ADD', VOCÊ ESTÁ PREPARANDO OS ARQUIVOS PARA SEREM COMMITADOS. O GIT RECONHECE QUE O ARQUIVO FOI MODIFICADO.
		--> COMMITED: COM TODOS OS ARQUIVOS PREPARADOS, OU SEJA, EM STAGED, VAMOS UTILIZAR DE OUTRO COMANDO 'GIT COMMIT' (QUE VEREMOS DETALHADAMENTE MAIS PRA FRENTE) PARA PODERMOS REALIZAR O COMMIT DAS ALTERAÇÕES, TRANSFORMANDO AGORA O NOSSO COMMIT EM UMA NOVA VERSÃO DO NOSSO CÓDIGO. CASO HAJA OUTROS ARQUIVOS MODIFICADOS, MAS QUE NÃO FORAM COLOCADOS EM STAGED, ELES NÃO SERAM COMMITADOS.

********************* EXEMPLO: VOCÊ ESTÁ FAZENDO MODIFICAÇÕES NO FRONT-END, POIS UM CLIENTE GOSTARIA DE TROCAR ALGUNS AJUSTES NO CSS. MAS, AO ACASO, VOCÊ VAI PRECISAR DEBUGAR O BACK-END, POIS UM OUTRO CLIENTE REPORTOU UM BUG. VOCÊ NÃO QUER PERDER AS SUAS ALTERAÇÕES NO FRONT, POIS VAI TE CUSTAR MAIS TEMPO E VOCÊ AINDA NÃO TERMINOU. VOCÊ PODE FAZER AS ALTERAÇÕES NECESSÁRIAS PARA CORRIGIR O BUG DO CLIENTE E, NA HORA DE COLOCAR OS ARQUIVOS PRO STAGED, VOCÊ DEIXA DE FORA OS ARQUIVOS DO FRONT-END.

-- GIT ADD

// NÃO É NECESSARIAMENTE PORQUE O GIT CONSEGUIU IDENTIFICAR ARQUIVOS E PASTAR ADICIONADO AO PROJETO, QUE ELES ESTARÃO NO GIT, EM SI. PARA PODERMOS ADICIONAR ESSE ARQUIVOS E PASTAS, DEVEMOS INFORMAR ISSO AO GIT. E PARA ISSO, VAMOS COMANDAR:
		--> GIT ADD .
		--> GIT ADD <file>

// O PRIMEIRO COMANDO ADICIONA TODOS OS ARQUIVOS MODIFICADOS. O SEGUNDO ADICIONA APENAS O ARQUIVO ESPECIFICADO.

--- GIT COMMIT

// COM OS ARQUIVOS EM STAGED, O PRÓXIMO PASSO É O COMMIT. PARA ISSO IREMOS COMANDAR:
		--> GIT COMMIT -M 'message'

// O RETORNO É A CONFIRMAÇÃO DO ARQUIVO EM COMMIT. A PARTIR DESSE MOMENTO, O SEU CÓDIGO ESTÁ VERSIONADO PELO GIT. E INFORMAÇÕES COMO AUTOR, DATA, HORA, ARQUIVOS MODIFICADOS E QUAIS AS MODIFICAÇÕES FORAM FEITAS, ESTÃO REGISTRADAS NO GIT. É NESSE MOMENTO QUE O GIT 'TIRA UM XEROX' DO SEU CÓDIGO.

-- GIT PUSH

// DEPOIS DE UTILIZAR O COMANDO 'GIT COMMIT' OS ARQUIVOS JÁ ESTÃO NA FASE DE COMMITED. E JÁ SÃO CONSIDERADOS VERSIONADOS PELO GIT. AGORA É O MOMENTO DE ENVIAR ESSE VERSIONAMENTO PARA UM HUB ARMAZENAR. E PARA PODERMOS FAZER ISSO, IREMOS UTILIZAR O SEGUINTE COMANDO:
		--> GIT PUSH

// APÓS A UTILIZAÇÃO DESSE COMANDOS, O RETORNO PODERÁ SER DIFERETE. UMA SITUAÇÃO QUE PODE ACONTECER É UM ERRO. E ESSE ERRO SIGNIFICA QUE NÃO FOI CONFIGURADO UM DESTIDNO DE PUSH. PARA SOLUCIONAR ESSE PROBLEMA, DEVEREMOS ANTES DO PUSH, CONFIGURAR O DESTIDNO. E PARA ISSO, VAMOS UTILIZAR O COMANDO:
		--> GIT REMOTE ADD <name> <url>

// EXPLICANDO: VAMOS ADICIONAR UM DESTINO REMOTO NO GIT. NO 'NAME' VAMOS ADICIONAR O NOME DA BRANCH (VEREMOS MAIS DETALHES SOBRE BRANCH A FRENTE) E A URL. EM SEGUIR IREMOS REPETIR O COMANDO DO PUSH. E SÓ ENTÃO, NOSSA VERSÃO DO CÓDIGO ESTARÁ NO HUB DISPONÍVEL PARA TODOS.

// A SEGUNDA SITUAÇÃO É A CONFIRMAÇÃO DO PUSH FEITO NO HUB. DETALHE IMPORTANTE: A ÚLTIMA LINHA TRÁS INFORMAÇÕES ÚNICAS SOBRE O PUSH QUE VOCÊ ACABOU DE FAZER. ENTRE OUTRAS COISAS, CONTÉM O HASH IDENTIFICADOR DO PUSH.

--- GIT PULL

// NAS EMPRESAS E, TAMBÉM, NOS HUBS PÚBLICO, OUTRAS PESSOAS PODEM FAZER ALTERAÇÕES NOS CÓDIGOS E COMMITAR. PARA ATUALIZAR A NOSSA VERSÃO LOCAL COM A VERSÃO UTILIZADA NO HUB, POSSUÍMOS UM COMANDO:
		--> GIT PULL

// CASO HAJA ALGUMA MODIFICAÇÃO NA BRANCH, ESSE COMANDO IRÁ TRAZER TODAS AS MODIFICAÇÕES FEITAS PARA O SEU REPOSITÓRIO LOCAL. CASO NÃO HAJA, ELE IRÁ NOS INFORMAR QUE ESTÁ ATUALIZADA.

===========================================================================================
===========================================================================================
-- COMANDOS VÁRIADOS

// A PARTIR DE AGORA, IREMOS VER COMANDOS E/OU INFORMAÇÕES IMPORTANTES SOBRE O GIT.

// A SEQUÊNCIA DE COMANDOS UTILIZADA ATÉ AGORA FOI UMA FORMA DE EXEMPLIFICAR OS COMANDOS MAIS BÁSICOS PARA O DIA A DIA DO DESENVOLVIMENTO, SEJA NA EMPRESA OU SEJA PARA PROJETOS PRÓPRIOS.

// A PARTIR DE AGORA, IREI APRESENTAR OUTROS COMANDOS IMPORTANTES DO GIT

--- BRANCH

// BRANCH DO INGLÊS PURO, É RAMO. E É BASICAMENTE O QUE A TRADUÇÃO TRAZ. UM RAMO.

// BRANCH SÃO UTILIZADAS POR VÁRIOS MOTIVOS, DEPENDENDO DO AMBIENTE DE TRABALHO. MAS A IDEIA CENTRAL DA BRANCH É UTILIZAR UMA VERSÃO ESPECIFÍCA DO CÓDIGO PARA SER A 'BASE' DAS RAMIFICAÇÕES. ENTÃO, BRANCH É UMA RAMIFICAÇÃO DO CÓDIGO QUE ESTÁ SENDO CONSTRUÍDO.

// POR PADRÃO, A PRINCIPAL BRANCH É A MASTER.

// PODEMOS VISUALIZAR TODAS AS BRANCHS LISTADAS EM NOSSO REPOSITÓRIO LOCAL, NOS UTILIZANDO DO COMANDO:
		--> GIT BRANCH

// O RETORNO SÃO TODAS AS BRANCHS CONHECIDAS. CASO HAJA ALGUMA BRANCH QUE SEU REPOSITÓRIO LOCAL NÃO CONHEÇA, UTILIZE O PULL PARA ATUALIZAR A SUA ÁREA DE TRABALHO.

// HÁ OUTRAS FORMAR DE SE UTILIZAR O GIT BRANCH.

// PODEMOS CRIAR UM NOVA BRANCH, NOS UTILIZANDO DOS COMANDOS:
		--> GIT BRANCH <nova_branch>
		--> GIT CHECKOUT -B <nova_branch>

// POR HORA, IREMOS NOS FOCAR NO PRIMEIRO COMANDO. O SEGUNDO IREMOS FALAR NA EXPLICAÇÃO DO CHECKOUT.

// O COMANDO BRANCH, ALÉM DE OUTRAS OPÇÕES, TAMBÉM PODE SER UTILIZADO PARA REMOVER UMA BRANCH. TENHA MUITO CUIDADO AO UTILIZAR ESSE COMANDO, ESPECIALMENTE EM AMBIENTE CORPORATIVO. O COMANDO É:
		--> GIT BRANCH -D <nome_branch>

// ESSE COMANDO É UTILIZADO PARA DAR UM DELETE COM O FORCE. ENTÃO ELE IRÁ DELETAR E DESCONSIDERAR OS AVISOS.

--- GIT LOG

//PARA TER VISUALIZAÇÃO DO SEU LOG DE COMMITS, EXISTE UM COMANDO QUE PODE SER UTILIZADO QUE IRA TRAZER AS PRINCIPAIS INFORMAÇÕES DOS SEUS ÚLTIMOS COMMIT. INCLUINDO O NÚMERO DA HASH. O COMANDO É:
		--> GIT LOG

// O RETORNO SÃO ALGUNS INFORMAÇÕES IMPORTANTE, COMO MENCIONADO ANTES, A HASH, O AUTOR, O DIA, A HORA, ENTRE OUTROS.....

// PARA OBTER AIINDA MAIS DETALHES SOBRE UM OU MAIS OBJETOS (OBJETOS SENDO ELES COMMITS, TAG, ÁRVORES...) ESSA INFORMAÇÕES VÃO SE DIFERENCIAR CONFORME O OBJETO. ALÉM DISSO AINDA HÁ INÚMEROS OUTROS COMPLEMENTOS QUE SE POSSA USAR NO SHOW PARA OBTER MAIS DETALHES COMO EMAIL, AUTOR,... O COMANDO:
		--> GIT SHOW

--- CHECKOUT ---

// O CHECKOUT NOS PERMITE PULAR PARA BRANCHS OU COMMITS.

// HÁ UM COMANDO BEM UTILIZADO:
		--> GIT CHECKOUT -B <nova_branch>

// COM A UTILIZAÇÃO DESSE COMANDO, VOCÊ IRA CRIAR UMA NOVA BRANCH, A PARTIR DO PONTO ATUAL DOS SEUS ARQUIVOS E VOCÊ JA VAI FAZER A TROCA DE BRANCH, PARA ESSA NOVA BRANCH.
// CASO SEJA NECESSÁRIO, VOCÊ PODE UTILIZAR OUTRO COMANDO APENAS PARA TROCAR DE BRANCH
		--> GIT CHECKOUT <branch>

// CASO SEJA NECESSÁRIO, VOCÊ SEMPRE PODERÁ UTILIZAR O COMANDO BRANCH, PARA VERIFICAR EM QUAL BRANCH VOCÊ ESTÁ.

// COM A EVOLUÇÃO DOS CÓDIGOS E DOS COMMITS, A BRANCH TERÁ SOFRIDO VÁRIAS ALTERAÇÕES E PODE SER NECESSÁRIO QUE VOCÊ VOLTE EM ALGUM PONTO DA SUA BRANCH. PARA CONSEGUIR TRAZER QUALQUER COMMIT EESPECÍFICO BASTA UTILIZAR O COMANDO:
		--> GIT CHECKOUT <commit> <file>

// O COMMIT PODE SER OBTIDO ATRAVES DO LOG. VAMOS FALAR DELE MAIS A FRENTE.


--- GIT REVERT
	
// OUTRO COMANDO UTILIZANDO PARA DESFAZER. ESSE COMANDO IRÁ CRIAR UM NOVO COMMIT, DESFAZENDO TODAS AS ALTERAÇÕES ATÉ O COMMIT ESPECIFICADO. PARA QUE O COMANDO SEJA UTILIZADO, PRIMEIRO DEVEMOS SABER QUAL O CÓDIGO DO COMMIT QUE QUEREMOS RETORNAR. UMA FORMA DE CONSEGUIR ESSE CÓDIGO É UTILIZANDO O COMANDO GIT LOG. O RETORNO SERÁ DOS ÚLTIMOS COMMITS ENVIADOS. E COM A POSSE DESSE CÓDIGO, BASTA UTILIZAR O COMANDO:
		--> GIT REVERT <código commit>

// NÃO HÁ A NECESSIDADE DE COPIAR O CÓDIGO POR COMPLETO. NA MÉDIA, 6 CARACTERES SÃO SUFICIENTES PARA O COMMIT SER ENCONTRADO, POIS CADA CÓDIGO DESSES É ÚNICO.

--- GIT DIFF
	
// ESSE É OUTRO COMANDO DO GIT BASTANTE INTERESSANTE DE UTILIZAR. O RETORNO QUE ESSE COMANDO TRÁS É A DIFERENÇA ENTRE DOIS COMMITS. PARA UTILIZAR ESSE COMANDO É NECESSÁRIO POSSUIR DOIS CÓDIGOS DE DOIS COMMITS DIFERENTES. PARA ACESSAR ESSES CÓDIGOS UMA MANEIRA É UTILIZAR O GIT LOG.
		--> GIT DIFF <código commit1> <código commit2>

// O RETORNO IRÁ MOSTRAR AS DIFERENÇAS ENTRE OS COMMITS.


--- GIT RESET

// ESTE É UM COMANDO VERSÁTIL E ÚTIL. MAS DEVE SER USADO COM CUIDADO. HÁ ALGUMAS FORMAS DE UTILIZAR ELE. BASICAMENTE VOCÊ PODE UTILIZAR O RESET E O RESET --HARD PARA DESFAZER TODAS AS ALTERAÇÕES LOCAIS QUE VOCÊ FEZ E VOLTAR OS ARQUIVOS PARA O ESTADO INICIAL DO PUSH. ENTRETANTO, SE VOCÊ ADICIONAR O CÓDIGO DO COMMIT, O COMANDO IRÁ APAGAR OS COMMITS FEITOS DEPOIS DELE. E OUTRAS PESSOAS OU EMPRESAS PODEM ESTAREM USANDO ESSES ARQUIVOS E ISSO PODE TRAZER GRANDES PROBLEMAS. MAS, PARA O INICIANTE, APENAS O COMANDO:
		--> GIT RESET (--HARD)

// É UM BOM COMANDO PARA VOLTAR OS ARQUIVOS ATÉ O PONTO INICIAL DO PUSH. PARA RESETAR REPOSITÓRIOS E REMOVER TODAS AS ALTERAÇÕES É MELHOR APROFUNDAMENTO TÉCNICO SOBRE O COMANDO.


--- GIT MERGE
	
// UM DOS COMANDOS MAIS COMPLEXOS ATÉ O MOMENTO. O MERGE SERVE PARA UNIR DUAS DIFERENTES BRANCHS. O MERGE IRÁ PEGAR UMA BASE COMUM ENTRE AS DUAS BRANCHS E APLICAR TODOS OS COMMITS QUE A BRANCH ATUAL NÃO POSSUI. CASO VOCÊ TENHA DUAS BRANCHS ('A' E 'B'), SENDO A 'B' A ÚLTIMA UTILIZADA; O MERGE TRARÁ TODOS OS COMMITS DE 'B' PARA 'A', ATUALIZANDO ASSIM A BRANCH 'A'. ENTRETANTO, SE NA SUA BRANCH 'A', VOCÊ FEZ COISAS QUE NÃO EXISTEM NA BRANCH 'B', SERÁ CRIADO UM COMMIT DE MERGE. PARA UTILIZAR O MERGE BASTA UTILIZAR O SEGUINTE COMANDO:
		--> GIT MERGE <branch>

// UTILIZANDO ESSE COMANDO É ESPERADO QUE HAJAM CONFLITOS NOS ARQUIVOS. O DESENVOLVEDOR DEVERÁ RESOLVER ESSES CONFLITOS. RESOLVIDO TODOS OS CONFLITOS, SERÁ CRIADO UM COMMIT DE MERGE.


--- GIT REBASE

// SEGUINDO NOS COMANDOS COMPLEXOS, TEMOS O REBASE. O REBASE É SEMELHANTE AO MARGE, PORÉM A DIFERENÇA FICA NA ORDEM DE APLICAR OS COMMITS. COM O REBASE, OS COMMITS NA FRENTE DA BASE SÃO REMOVIDOS TEMPORARIAMENTE, ENTÃO SÃO APLICADOS OS COMMITS DA OUTRA BRANCH E POR FIM, OS COMMITS QUE FORAM REMOVIDOS, SERÃO APLICADOS.
// TALVEZ SEJA NECESSÁRIO RESOLVER CONFLITOS.


======================================================================================================================================================================================

REFERÊNCIAS:
- https://git-scm.com/
- https://githowto.com/pt-BR
- https://www.digitalocean.com/community/tutorials/como-criar-um-pull-request-no-github-pt
- https://medium.com/@devmasterteam/git-ebook-8808f7301054
- https://gitfichas.com
- https://blog.rocketseat.com.br/iniciando-com-git-github/
- https://pt.education-wiki.com/1972852-git-life-cycle
- https://dev.to/eduardoopv/3-estados-dos-arquivos-git-e-github-3ee6
- https://www.digitalocean.com/community/tutorials/como-criar-um-pull-request-no-github-pt
- https://blog.rocketseat.com.br/iniciando-com-git-github/
- https://www.hostinger.com.br/tutoriais/tutorial-do-git-basics-introducao?ppc_campaign=google_performance_max&gclid=Cj0KCQiAjc2QBhDgARIsAMc3SqT1RnE-jksit07eHzrb073nZ4jI47tDXpDhoiNyfla3l6DxKXm3AukaAvygEALw_wcB
- https://www.carloseduardonogueira.dev/controle-versao/estagios-arquivo-no-git/
- https://www.carloseduardonogueira.dev/controle-versao/como-git-controla-versao-parte-2/index.html


======================================================================================================================================================================================
CURSOS:
- https://www.udemy.com/course/git-e-github/learn/lecture/7211470?start=0#overview
- https://www.udemy.com/course/git-github-o-essencial-para-iniciantes/learn/lecture/28732156?start=0#overview
- https://www.udemy.com/course/git-para-iniciantes/learn/lecture/11300130?start=0#overview
- https://www.udemy.com/course/git-e-github-para-iniciantes/learn/lecture/5120524?start=0#overview
- https://www.youtube.com/watch?v=FF1f4bKYhoo&list=PLbEOwbQR9lqzK14I7OOeREEIE4k6rjgIj

======================================================================================================================================================================================
LIVROS (Fundação Livros Grátis - GitHub):
- http://rogerdudler.github.io/git-guide/index.pt_BR.html
- http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/pt_br/
- https://github.com/ltiaunesp/Git-Minicurso
- http://git-scm.com/book/pt-br/v2

======================================================================================================================================================================================
SLIDES:
- https://docs.google.com/presentation/d/1p7YZqlCUBfL1LmdKhAgLN9Lx-eFBO9RdxHpGhYdeXUI/edit?usp=sharing

